--1
fetch API avec usesEffect(array vide, avec un maj de state, une gestion d'erreurs por la connexion avec un state)
!! factorisation à faire pour code clean 


-- 2
*Pagination:
useMemo utilisé pour calculer une var qui ne sert pas au rendu
useMemo( (x) => {return calcul }, [var qui crée la dépendance])

?? Comment récupérer une info du fetch inclus dans une useEffect à l'extérieur
-> pas besoin de récupérer d'autres infos que maxId et current_page, car:

const [mangalist, setMangaList] = useState<Manga[]>([]); // init de la liste à vide avant appel api
useEffect(() => {
    fetch(`https://api.jikan.moe/v4/manga?page=${pageNumber}`)
        .then((response) => response) 
        .then((body) => body.json())
        .then((bodyJSON) => {
            setTotalCountManga(bodyJSON.pagination.items.total);
            setPageNumber(bodyJSON.pagination.current_page);
            setMangaList(bodyJSON.data)
        })
        .catch((error) => {
            console.error('There was a problem with the fetch operation:', error);
        })
    }, [pageNumber]);

    [pageNumber] à la toute fin du useEffect(() => { }, [*]) permet de dire au useEffect de se 'recomposer' à chaque modification de valeur


--3
*Naviagtion
path, element, children sont les paramètres à utiliser dans createBrowserRouter. 
Dans children : index, element sont à remplir: Vrai <> X </> || Faux {X()}



--4
Wrapper Background & ShadowBg : est ce que les 2 wrappers sont interchangeables d'un point de vue ordre ? 
=>Ils ne le sont pas car le ShadowBg est là pour la lisibilité du texte en fond clair


-*- TopBar
position : absolute au lieu de fixed (pour rendre tout l'écran scrollable et non que le layout/screen choisi)



--5 ReactQuery
RQ est une librairie qui permet de gérer les requêtes API, la relance de ses requêtes et le cache pour l'actualisation des données.
Toutes les données sont init par une fct perso, qui prend une clé et la requête directe (dans la vidéo c'est via axios).
La requête retourne un status, une error et les données.




--Recap 07/05/25
*Factoriser les composants à l'extérieur de la fonction HomeScreen() et utiliser une fonction pour render selon les param.
les useQuery doivent être dans un fichier Hook,
les fetch dans un fichier service/api

*Début du back avec Nest via le skelette pour Login/Register
Gérer les modules, les controllers en remplaçant fetch classic par axios pour init interceptor(token)


---
!! Mettre sur le front le nombre de likes pour chaque manga grâce au traitement effectué dans le back (tt est dans le back)
Attention aux routes (cast ObjectId à cause de la mauvaise route, regarder l'onglet réseau du dom)



------------
Q: Est ce normal que le fond d'écran charge très lentement pour MangaInfoScreen ?
R: Non, mais pq ?


------
A FRAIRE: MangaInfoScreen: réhausser la partie droite du screen !